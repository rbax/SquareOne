

# -----------------------------------------------------------
# 			Configuration options for Build Flags (MSVC)
# ----------------------------------------------------------- [Build Flag Notes]

	# 	https://msdn.microsoft.com/en-us/library/ms175759(v=vs.140).aspx
	#	https://msdn.microsoft.com/en-us/library/fwkeyyhe.aspx

	# ----------------------------------------------------------- [Secure Template Overloads for C Run-time Library (CRT)]

		# /_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES1		# enables template overloads of standard CRT functions that call the more secure variants automatically
		# /D_CRT_SECURE_NO_DEPRECATE 					# Remove Debug CRT Deprecate Warnings
		# /_CRT_SECURE_NO_WARNING						# Remove all CRT warnings


	# ----------------------------------------------------------- [Arch]

		# /arch:IA32		# (x86) Specifies no enhanced instructions and also specifies x87 for floating-point calculations.
		# /arch:SSE	 		# (x86) Enables the use of SSE instructions.
		# /arch:SSE2 		# (x86)	Enables the use of SSE2 instructions. (This is the default instruction on x86 platforms if no /arch option is specified.)

		# /arch:AVX			# (x86/x64) Enables the use of Intel Advanced Vector Extensions instructions.
		# /arch:AVX2		# (x64) Enables the use of Intel Advanced Vector Extensions 2 instructions

		# /arch:ARMv7VE		# (ARM) Enables the use of ARMv7VE Virtualization Extensions instructions.
		# /arch:VFPv4		# (ARM) Enables the use of ARM VFPv4 instructions. If this option is not specified, VFPv3 is the default.


	# ----------------------------------------------------------- [/O Options (Optimize Code)]
	# 	https://msdn.microsoft.com/en-us/library/k1ack8f1.aspx

		# /O1				# Creates the smallest code in the majority of cases.
							# /O1 is equivalent to: /Og /Os /Oy /Ob2 /Gs /GF /Gy

		# /O2				# Creates the fastest code in the majority of cases.
							# Default setting for release builds
							# /O2 is equivalent to: /Og /Oi /Ot /Oy /Ob2 /Gs /GF /Gy

		# /Ox				# Uses maximum optimization (Favors execution speed over smaller size).
							# /Ox is equivalent to: /Ob / Og / Oi / Ot / Oy
							# /Ox is mutually excusive from: /O1 / O2 /Od

		# /Oy				# Suppresses the creation of frame pointers on the call stack for quicker function calls.

		# /Oi				# Replaces some function calls with intrinsic or otherwise special forms of the function that help your application run faster.

		# /Ob2				# Controls inline expansion of functions.


	# ----------------------------------------------------------- [Misc]

		# /Qfast_transcendentals		#Generates fast transcendentals.

		# /MP							# Enables the compiler to create one or more copies of itself, each in a separate process.
										# These copies simultaneously compile the source files, significantly reducing total build time.
		# /fPIE                         # Address space layout randomization

		# /D_REENTRANT                  # Compiler will use thread safe (i.e. re-entrant) versions of several functions in the C library
